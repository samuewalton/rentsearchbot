KeyRentBot System Spec 
 ומבנה כללי
🧠 מטרת המערכת
מערכת KeyRentBot מאפשרת השכרה קצרה של נכסים טלגרמיים (בוטים, קבוצות, ערוצים)
 לפי דירוגם בתוצאות חיפוש גלובלי בטלגרם. כל המערכת פועלת מבוסס בוט טלגרם בלבד, עם ניהול נכסים, לקוחות, ודינמיקה עסקית.

🔑 מושגי יסוד
מושג	הסבר
נכס (Asset)	ערוץ, קבוצה או בוט בבעלות האדמין, שיכול לעבור שינוי שם זמני לצורך קידום
סשן נקי (Clean Session)	סשן חדש ללא פעילות, מתאים לבדוק חיפוש טלגרם ללא הטיות
סשן מלוכלך (Dirty Session)	סשן שמשמש לעריכת שמות של בוטים (אין לו בעלות על נכסים)
סשן מנהל (Manager Session)	סשן עם הרשאות אדמין/בעלות על ערוצים/קבוצות
דירוג (Rank)	המיקום של נכס עבור מילת חיפוש ספציפית
Tier	סיווג דירוג – Premium (1–3), Regular (4–7), לא זמין (8+)
@@@@@@	סיומת מיוחדת לשם הנכס כדי לאלץ אינדוקס מהיר בטלגרם
Watchdog	מנגנון ברקע שבודק דירוגים ומנטר שינויי Tier בזמן אמת
רנטל (Rental)	תקופת שימוש בנכס לשם קידום מילות מפתח
Cache דירוג	מנגנון שמונע בדיקה חוזרת של דירוגים בטווח 24h

🧱 מבנה רכיבי המערכת
bot_core.py: ממשק הבוט הראשי, קלט משתמשים

assets_manager.py: ניהול, הוספה ותיוג של נכסים

rank_checker.py: בדיקת דירוג חיפוש לנכס מסוים

profile_editor.py: שינוי והחזרת שם הנכס

session_manager.py: טעינה, רוטציה וסינון סשנים

proxy_manager.py: הקצאת פרוקסי תואם לסשן

rent_logic.py: קבלת החלטות עסקיות

watchdog.py: ניתוח ירידות דירוג וניהול בזמן אמת

💡 עקרונות מנחים
כל לקוח מקבל מענה מידי להצעת השכרה לפי דירוג עדכני

כל שינוי שם של נכס מחויב לחזור למצבו הקודם

דירוגים זמניים → Cache של 24h למניעת עומס

כל סשן משויך לפרוקסי בלעדי, עם ניהול תקינות

⛓️ תלותים ודרישות
Telethon + API Hash/ID

מסד נתונים Postgres / JSON fallback

שרת קבוע להפעלת הבוט

קובצי sessions תקפים

פרוקסים פעילים + מערכת ניטור



– Part 2
: זרימות, דינמיקות ותנאים

🔄 זרימת עבודה מערכתית

שלב 1: קבלת מילת מפתח מהלקוח

מתקבל קלט (keyword) מהמשתמש דרך בוט טלגרם.

מתבצע לוגינג של הבקשה.

נבדק cache האם כבר נבדקה מילה זו בעבר 24h.

שלב 2: חיפוש נכסים פוטנציאליים

מתוך DB / קבצי JSON.

מתבצע פילוח לפי קטגוריה, תגיות, סוג הנכס (בוט/קבוצה/ערוץ).

ממויינים לפי פוטנציאל התאמה (שמות קיימים, tag match).

שלב 3: בדיקת דירוג (Rank Check)

מבוצע רק עם סשנים נקיים.

לכל נכס במועמדים מבוצע:

שינוי שם זמני ל-keyword@@@@@@

סשן נקי שואל את טלגרם היכן מופיע הנכס

מתקבל Rank בין 1–N

המידע נרשם + מושווה מול Tier:

Rank 1–3 → Tier Premium

Rank 4–7 → Tier Regular

Rank > 7 → נופל

שם מוחזר לקדמותו ע"י profile_editor

שלב 4: קבלת החלטה עסקית

המערכת בוחרת את הנכס בעל הדרוג הגבוה ביותר הזמין להשכרה.

נשמר לוג.

נוצרת רשומת rental_status="PENDING".

נשלחת הצעה ללקוח.

שלב 5: תשלום

לינק תשלום מועבר.

בוצע תשלום → התהליך עובר ל-ACTIVE

לא בוצע תוך X שעות → rental מתבטל.

שלב 6: הפעלת הנכס בזמן אמת

שם משתנה שוב ל-keyword@@@@@@

נכס מקודם בטלגרם ע"י השכרה.

בוט שומר זמן השכרה שנבחר (24h/48h/72h).

נוצר Watchdog ברקע:

ניתוח דירוג כל 2h.

ירידה Tier → Notification ללקוח.

אם אין אלטרנטיבה → Refund יחסי.

שלב 7: סיום

Expiration → שם מחזיר למצב דיפולט.

נרשמת השכרה כהיסטורית.

נשלח סקר/הודעה ללקוח.

⏱ זמנים קריטיים במערכת

פעולה

זמן פעולה

תדירות

בדיקת דירוג

<15 שניות לנכס

זמני לבדיקה

Cache דירוג

24 שעות

קבוע

התראה לקוח בזמן דירוג נמוך

מיידי

לפי Watchdog

Watchdog

כל שעתיים

קבוע

החזרת שם פרופיל

מיידי

תמיד לאחר פעולת Rank

📤 טריגרים ודינמיקה

כניסות:

פקודה בוט /check, /buy, /keywords

Cron Jobs: Watchdog, Cleanup

יציאות:

הודעות ללקוח

עדכון DB

כתיבה לקבצי log/audit

🌀 דינמיקות סשנים

תפקיד

תיאור

מינימום רצוי

Clean

לבדוק דירוג ללא השפעה

5 לפחות בפיזור

Dirty

עריכת בוטים

5 לעריכה מקבילה

Manager

ניהול קבוצה/ערוץ אישי

לפי נכסים פעילים

חלוקה דינמית:

אם אין מספיק CLEAN, שימוש מושכל ב-DIRTY כניסיון אחרון עם FLAG fallback=true

במקרי עומס, SessionManager מפצל משימות ע"י זמני מנוחה לסשנים

🧠 Fail Strategy

נכס נפל דירוג במהלך השכרה → קודם כל מנסה להחליף נכס אחר דומה.

אין נכס חלופי → Refund יחסי.

סשן בעייתי → מוחרם.

בוט לא משתנה → Notification + fallback מיידי.

KeyRentBot System Spec – Part 3: אזור אישי, בוט, ודשבורד טלגרמי

👤 אזור אישי – חווית משתמש לקוח

מטרות:

שליטה מלאה דרך בוט בלבד (ללא ממשק Web).

שקיפות לגבי היסטוריית הזמנות, סטטוס נכסים, ותשלומים.

אפשרות ביטול/הארכה, צפייה בהצעות עתידיות.

תפריט פקודות עיקריות:

/my_keywords → צפייה במילות מפתח שביקש

/my_rentals → רשימת נכסים פעילים + היסטוריים

/alerts → קביעת התראות לפי דירוג/תפוגה

/cancel_rental → ביטול יזום תוך תנאים

/extend → בקשת הארכה לנכס מושכר

/preferences → הגדרת העדפות מחיר/סוג נכס

🔔 תזכורות ודינמיקה

כל השכרה בסטטוס ACTIVE נרשמת בטבלת צפייה ללקוח

3 שעות לפני תפוגה → תזכורת ראשונה

תזכורת שנייה – 15 דקות לפני הסיום

Watchdog שולח התרעות דירוג אוטומטיות אם תנודת Tier

💰 מסך תשלום ושקיפות

כל הצעת נכס כוללת:

תמונת מצב דירוג נוכחי (Rank + Tier)

עלות

כפתור תשלום

לאחר תשלום:

אישור + קבלה אוטומטית

עדכון סטטוס ל-ACTIVE

🧾 היסטוריה והתנהגות

כל היסטוריית השכרות מאוחסנת:

מילה, תאריכים, נכס, תשלום, דירוג בזמן אמת

משמש להפקת תובנות, חיזוי נכסים, ופידבק ללקוח

KeyRentBot System Spec – Part 4: ניהול סשנים ותחזוקת פרוקסי

🛠 עקרונות ניהול סשן

מבנה Session

session_id: מזהה ייחודי

session_string: מחרוזת התחברות

type: Clean / Dirty / Manager

status: Active / Banned / Cooldown

last_used: timestamp

תהליך טעינה

טוען קבצי session מקובץ / מסד

מזהה את סוגו לפי תכנים / הרשאות

מתייג למערכת לפי התאמה

🔁 רוטציית סשנים

כל שימוש בודק:

תקינות התחברות

פרוקסי זמין

האם בשימוש / במנוחה

מנהל רשימת available_sessions

מזהה Session שנפסל → עובר לbanned

🌐 ניהול פרוקסי

כל סשן צמוד לפרוקסי ייחודי זמני

מערך ProxyManager:

מאחסן רשימת פרוקסים תקפים

מבצע ping וניתוח קצב

מתאים פרוקסי לסשן לפי תעדוף DC

📊 ניטור ואבחון

סשן נכשל? נרשם ב-failed_sessions.log

ניטור usage לכל סשן (DB + קובץ)

בדיקות אוטומטיות כל 6 שעות:

זמינות סשנים

תגובת פרוקסי

סיווג מחדש במידת הצורך

🧰 תחזוקת Session

זמני מנוחה בין שימושים: מינ' 10 דק'

שחזור/טעינה מחדש לסשנים שנכשלו זמנית

מחיקה אוטומטית לסשנים dead > 72 שעות


KeyRentBot System Spec – Part 5: דירוגים ואלגוריתם החלטה עסקית

(בהמשך)

📈 דירוגים והחלטות

מטרות המודול:

למדוד את דירוג הנכס עבור מילה מסוימת בחיפוש גלובלי בטלגרם.

לקבוע אם ניתן להשכיר את הנכס.

לקבוע Tier (רמה) על בסיס הדירוג.

להציג את הנכס המוביל ללקוח.

📐 אלגוריתם דירוג

הכנת נכס לבדיקה:

שינוי זמני לשם "keyword@@@@@@" כדי להאיץ אינדוקס.

עדכון שם דרך profile_editor.py לפי סוג הנכס:

Bot → API

Channel/Group → session עם הרשאות מנהל

המתנה קצרה (1–2 דק')

מאפשר לאינדוקס להתרחש

מנוהל ע"י rank_scheduler.py

שליחת בקשת חיפוש

נקלט על ידי סשן נקי (Clean Session)

חיפוש גלובלי ב־Telegram → מתבצע דירוג

איתור נכס בין התוצאות:

אם נמצא → מחזיר rank

לא נמצא → rank = -1

ניתוח תוצאה:

1 ≤ rank ≤ 3 → Tier = Premium

4 ≤ rank ≤ 7 → Tier = Regular

rank > 7 → לא להשכרה

שחזור שם

מייד לאחר כל בדיקה → השם מוחזר למקורו

💸 תמחור והשכרה

דירוג

Tier

מחיר / 24h

1

Premium

$150

2

Premium

$125

3

Premium

$100

4–7

Regular

$50

8+

—

❌ לא להשכרה

תמחור מתבצע לפי Tier

ניתן להוסיף override מחיר בקובץ/DB

זמינות מוצגת ללקוח כולל Tier, Rank ופרוקסי נלווה

📦 Cache ודחיית עומסים

כל דירוג נשמר ל־24 שעות לפי המפתח (asset_id, keyword)

אם מתקבלת בקשה חוזרת באותו חלון → תוצאה קיימת מוצגת

מאפשר לשמור על טווח ה־Rate Limit של Telegram

🧠 החלטה עסקית

כאשר מספר נכסים זמינים → בוחרים לפי:

Tier גבוה יותר

rank נמוך יותר (1 עדיף על 2)

זמינות השכרה (מיידית)

מינימום זמן מנוחה מהשכרה קודמת

בעלות / פרוקסי תקינים

אם אין נכס רלוונטי → הצעה נדחית

Part 6: מחזור השכרה, תזכורות וניהול חכם
🔄 מחזור חיי השכרה (Rental Lifecycle)
1. השכרה חדשה – status = PENDING
נוצרה בקשת השכרה ע"י משתמש עבור keyword מסוים.

בוט מציע ללקוח נכס מתאים (כולל tier, דירוג, עלות, משך).

המערכת ממתינה לתשלום:

טיימר ברקע (awaiting_payment)

אם לא משולם תוך 4 שעות → ביטול אוטומטי (status = CANCELED)

אם שולם → עדכון ל־ACTIVE

2. הפעלה והקצאה – status = ACTIVE
שם הנכס משתנה לפי מילת מפתח keyword@@@@@@

זמן השכרה מוזן למערכת (24/48/72h)

watchdog מופעל:

מזהה אם הדירוג נפל Tier (ex. מ־1→5)

במידה ויש → ניסיון להחליף נכס

אין נכס חלופי → Refund חלקי

3. הארכה וביטול
משתמש יכול:

/extend → הארכת זמן לפני סיום

/cancel_rental → ביטול יזום לפני תום זמן

במידה ובוט לא מגיב → fallback + הודעה לאדמין

4. סיום – status = EXPIRED
בהגעה לסיום הזמן:

שם הנכס מוחזר למצבו המקורי

רשומת השכרה נרשמת כהיסטורית

תזכורת נשלחת ללקוח:

"רוצה להשכיר שוב?"

הצעה לחידוש + מחיר רלוונטי

⏰ תזמונים ותזכורות
שלב	זמן	תזכורת
התחלה	0	ברוך הבא להשכרה
לפני סיום	3h	תזכורת #1 להארכה
לפני סיום	15min	תזכורת #2 אחרונה
סיום	0	דירוג נסגר, תודה

כל תזכורת מופעלת ע"י notifier.py

במקביל, נשלח webhook/log לאדמין

🔔 דירוג נפל בזמן השכרה – ניטור חכם
Watchdog מזהה ירידה בדירוג:

מעבר מ־Tier 1 ל־Tier 4

או נפילה מהמיקום הכללי

המערכת בודקת:

זמינות של נכס אחר עם keyword

דירוג טוב יותר או שווה

אם כן – נכס מוחלף, הלקוח מקבל התראה: "הנכס הוחלף לנכס עם דירוג גבוה יותר"

אם לא → שליחת הודעה + הצעת REFUND חלקי או הארכה

💳 ניהול תשלומים
כל תשלום נרשם ע"י webhook מחברת סליקה

לוגיסטיקה:

rental_id, user_id, asset_id

סכום, timestamp

בעיות בתשלום → בוט מודיע אוטומטית למשתמש

🧾 Audit & Analytics
כל השכרה יוצרת רשומת audit

ניתוחים:

אחוז הצלחות

כמה פעמים ירד דירוג

אורך השכרה ממוצע

זמן תגובה בוטים

שימושי לצורך התאמת מחירים בעתיד


Part 6: מחזור חיי השכרה וניהול Watchdog

🔁 שלבי Lifecycle

PENDING – לקוח קיבל הצעה ועדיין לא שילם

ACTIVE – תשלום בוצע, שם הנכס עודכן, התחילה השכרה

MONITORING – Watchdog פועל: בודק כל 2h, מתריע על ירידה ב-Tier

EXPIRING – 3 שעות לפני סיום → תזכורת ראשונה

EXPIRED – זמן ההשכרה נגמר

ARCHIVED – השכרה נרשמה כהיסטורית

⏲️ Timers & תזכורות

מצב

זמן

פעולה

התחלה

ברגע התשלום

שינוי שם לנכס + הפעלה

תזכורת ראשונה

3h לפני סיום

הודעה ללקוח + הארכה אופציונלית

תזכורת שנייה

15 דק' לפני סיום

התראה אחרונה

Expiration

בתום זמן ההשכרה

השבת שם מקורי, סיום ההשכרה

🚨 Watchdog התנהגות

בכל 2 שעות:

בודק דירוג חדש לנכס מושכר

אם Tier ירד → Notification + הצעה לנכס חלופי

אם אין חלופי → refund יחסי (DB update + הודעה)

⚖️ החלטות מערכת

שומר סטטוס MONITORING

משתנה לפי תנודות דירוג, הארכות, ביטולים

כל שינוי סטטוס → Log + הודעה ללקוח

📒 תיעוד

כל rental מתועד ב:

rental_id

user_id

asset_id

keyword

tier + rank בזמן תחילת ההשכרה

timestamps: התחלה, תזכורות, סיום

היסטוריית שינוי דירוג לאורך זמן


# Part 7: Technical Implementation Deep Dive 🔧

## Session Classification & Management 

### 🤖 SessionClassifier - סיווג אוטומטי של סשנים

המערכת **לא מחליטה מראש** על תפקיד הסשן. במקום זאת, SessionClassifier בודק אוטומטית כל סשן שהאדמין מוסיף:

```python
# לוגיקת הסיווג ב-session_classifier.py:
if not has_interactions:
    role = "rank_checker"  # CLEAN Session
elif owned:
    role = "owner"         # MANAGER Session - בעל נכסים  
elif admin_of:
    role = "admin"         # MANAGER Session - יש הרשאות אדמין
else:
    role = "bot_editor"    # DIRTY Session - יש אינטראקציות אבל אין נכסים
```

### 🔍 תהליך הסיווג:
1. **בדיקת אינטראקציות**: `GetDialogsRequest()` - בודק אם יש היסטוריית שיחות
2. **זיהוי בעלות**: `entity.creator` - בודק אם הסשן בעל נכסים
3. **זיהוי הרשאות**: `entity.admin_rights` - בודק אם יש הרשאות אדמין
4. **הקצאת תפקיד**: לפי היכולות שנמצאו

### 📋 סוגי סשנים והשימוש שלהם:

| סוג סשן | תנאי סיווג | תפקיד | למה דווקא? |
|---------|------------|--------|-------------|
| **CLEAN** | אין אינטראקציות | בדיקת דירוג בלבד | תוצאות חיפוש נייטרליות ללא bias |
| **MANAGER** | בעל/אדמין נכסים | עריכת ערוצים/קבוצות | רק מי שיש לו הרשאות יכול לשנות שמות |
| **DIRTY** | יש אינטראקציות, אין נכסים | עריכת בוטים | סשן "מזוהם" מתאים לעריכות |

## ⚡ Exact Ranking Flow - הזרימה המדויקת

### 🎯 למה דווקא בסדר הזה?

**השלבים המדויקים:**

1. **קבלת keyword מלקוח** → `bot_core.py`
2. **בדיקת cache** → אם קיים - מחזיר מיד 
3. **קבלת MANAGER session** → לשינוי שם הנכס
4. **שינוי שם** → `profile_editor.change_asset_name(asset_id, "keyword@@@@@@")`
5. **המתנה 30 שניות** → זמן אינדוקס של טלגרם
6. **קבלת CLEAN session** → לבדיקה נייטרלית
7. **חיפוש גלובלי** → `functions.contacts.SearchGlobalRequest(keyword)`
8. **איתור מיקום** → `user_ids.index(asset['telegram_id']) + 1`
9. **שחרור CLEAN session** → `session_manager.release_session()`
10. **קבלת MANAGER session שוב** → להחזרת שם
11. **החזרת שם מקורי** → `profile_editor.change_asset_name(asset_id, original_name)`
12. **שמירה למטמון** → למשך 24 שעות

### 🔑 Why This Architecture? 

#### **הפרדת אחריות (Separation of Concerns):**
- **ProfileEditor**: רק משנה שמות → SINGLE RESPONSIBILITY
- **RankChecker**: רק בודק דירוגים → אם אחד נכשל, השני עובד
- **SessionManager**: רק מנהל סשנים → מניעת collision

#### **מניעת Bias באלגוריתם:**
```
CLEAN Session = סשן "בתול" ללא היסטוריה 
↓
SearchGlobalRequest() מחזיר תוצאות נייטרליות
↓  
הדירוג אמין ולא מושפע מפעילות קודמת
```

#### **Rate Limiting Prevention:**
- **10 דקות cooldown** בין שימושים → מניעת session ban
- **24 שעות cache** → מניעת בדיקות מיותרות
- **הפרדת סשנים** → כל אחד נראה כמשתמש נפרד

### 🚀 ה-@@@@@@ Suffix - האקינג האינדוקס

**למה דווקא @@@@@@ ?**

1. **מחרוזת לא שכיחה** → טלגרם מזהה שינוי "דרמטי"
2. **סימנים מיוחדים** → מאיצים את עדכון האינדוקס
3. **זיהוי קל במערכת** → בדיקה אם השינוי התבצע
4. **מניעת התנגשויות** → וודאות ששם ייחודי

זה **exploit מתועד**
